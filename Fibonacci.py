from common import notify_error, log_api_call
from fibonacci import fibonacci_calc
from flask import Flask
from flask import jsonify
from flask import redirect
from flask import request
import logging
from logging.handlers import RotatingFileHandler


app = Flask("FibonacciAPI")

HTTP_ERROR_CLIENT = 403
HTTP_ERROR_SERVER = 500

@app.route('/', methods=['GET'])
def index():
    """
    function: index
    params:   none
    notes:    redirects to the documentation.
    """
    return redirect("/static/index.html")



@log_api_call
@app.route('/fibonacci/list', methods=['GET'])
def fibonacci_list_api():
    """
    function:  fibonacci_api
    params:    none
    returns:   flask response object suitable for return to the client.  May be an error or a valid successful reply.
    pre-requisites:  GET request requires a 'count' parameter that is parsable as a long and greater than zero.
    """
    if 'count' not in request.args or request.args['count'] in ("", None):
        return notify_error("ERR_NO_ARG:  'count' argument required to /fibonacci/api", HTTP_ERROR_CLIENT)

    try:
        count = long(request.args.get('count', ''))
    except:
        return notify_error("ERR_INVALID_TYPE:  'count' parameter must be an integer", HTTP_ERROR_CLIENT)

    if count < 0:
        return notify_error("ERR_OUT_OF_BOUNDS:  'count' parameger must be a postitive integer", HTTP_ERROR_CLIENT)

    try:
        return jsonify(answer=fibonacci_calc(count))
    except Exception as ex:
        return notify_error(ex, HTTP_ERROR_SERVER)


@app.route('/fibonacci/docs', methods=['GET'])
def fibonacci_docs():
    """
    function:   fibonacci_docs
    params:     none
    returns:    redirect response to the actual docs, generated via makefile and placed in the static directory.
    notes:      The documentation is generated by Sphinx via make
                >  cd ./docs
                >  make html
                Documentation is now available as HTML in the "static" directory.
    """
    return redirect("/static/index.html")


if __name__ == '__main__':
app.run()